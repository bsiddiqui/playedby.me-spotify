PlayedBy.me
---------------

Our first design decision was to use Ruby on Rails. We wanted to choose a language that was simple to learn but that would be useful after this project. Rails seemed like a great idea because it was advertised as simple and powerful, but we found the learning curve steep. Although it was difficult to get started, we came to enjoy Rails because it has a great community (we attended a few events), tons of gems (libraries) with powerful functions, and has very readable code. 

We started our design by thinking about the key databases we wanted to use: Users, Songs, and Parties (playlists). The logic of application requires a user to login to begin creating/joinining a Playlist. When a user logs-in with Facebook, we store the information Facebook sends us in the Users table. Then, when the user creates a playlist, we add information about the playlist to the Party table and link it to the user. As people join playlists and add songs, up/down vote, etc we also store all that information in our Songs database. Using ActiveRecord, all of these databases are interconnected. A User has many Parties; Parties have many Songs and Users; Songs have one playlist. We designed the database in this way so that we have lots of data to be used for future features. 

Our decision to have a simple interface, use FB login, add songs with Spotify, etc was all made with user experience in mind. We wanted a simple site that people could use to collaborate on playlists. Since creating a great, collaborate playlist was our ultimate goal, we found the up/down vote feature important. We implemented this feature by adding a column to our Song database that keeps track of up and down vote and indexes based on vote count. Later on we're hoping to add a feature that shows trending songs by seing which songs have been the most upvoted across all Playlists.